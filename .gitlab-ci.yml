stages:
  - docker
  - prepare_stage
  - dev
  - stage
  - prepare_release
  - deploy_prod

###############################################################################
# ANCHORS
###############################################################################

.configure_gcloud_anchor: &configure_gcloud |
  echo "$GITLAB_GCR_PUSH_SERVICE_ACCOUNT" > /root/gcp.json
  gcloud auth activate-service-account --key-file /root/gcp.json
  export GOOGLE_APPLICATION_CREDENTIALS=/root/gcp.json
  gcloud auth configure-docker


.base_anchor: &base
  variables:
    CI_SERVER_URL: https://gitlab.com
    TERM: xterm-color
    REGISTRY_URL_CICD: eu.gcr.io/neptune-cicd/neptune
    REGISTRY_URL_PROD: eu.gcr.io/neptune-poc/neptune
    DOCKER_TLS_CERTDIR: ""
    DOCKER_HOST: docker:2375
    GIT_SUBMODULE_STRATEGY: recursive
  image: eu.gcr.io/neptune-cicd/neptune/build-image-base:0.0.11
  services:
    - docker:18.09.7-dind
  before_script:
    - echo $HOSTNAME
    - date
    - *configure_gcloud

.base_anchor_stage: &base_stage
  variables:
    CI_SERVER_URL: https://gitlab.com
    TERM: xterm-color
    REGISTRY_URL_CICD: eu.gcr.io/neptune-cicd/neptune
    REGISTRY_URL_PROD: eu.gcr.io/neptune-poc/neptune
    GIT_SUBMODULE_STRATEGY: recursive
  image: eu.gcr.io/neptune-cicd/neptune/build-image-base:0.0.11
  before_script:
    - echo $HOSTNAME
    - date
    - GITLAB_GCR_PUSH_SERVICE_ACCOUNT="${GITLAB_RUNNER_KUBERNETES_STAGE}"
    - *configure_gcloud

.base_anchor_prod: &base_prod
  variables:
    CI_SERVER_URL: https://gitlab.com
    TERM: xterm-color
    REGISTRY_URL_CICD: eu.gcr.io/neptune-cicd/neptune
    REGISTRY_URL_PROD: eu.gcr.io/neptune-poc/neptune
    GIT_SUBMODULE_STRATEGY: recursive
  image: eu.gcr.io/neptune-cicd/neptune/build-image-base:0.0.11
  before_script:
    - echo $HOSTNAME
    - date
    - GITLAB_GCR_PUSH_SERVICE_ACCOUNT="${GITLAB_RUNNER_KUBERNETES_PROD}"
    - *configure_gcloud

.docker_build_job:
  <<: *base
  stage: docker
  tags:
    - build
  only:
    - branches
    - tags
  except:
    - web

.release_chart_job:
  <<: *base
  stage: prepare_release
  tags:
    - deploy-prod
  only:
    - tags
  except:
    - branches


.deploy_prod_job:
  <<: *base_prod
  stage: deploy_prod
  tags:
    - deploy-prod
  only:
    - tags
  except:
    - branches

.deploy_stage_job:
  <<: *base_stage
  stage: stage
  tags:
    - deploy-stage-2
  except:
    - tags
    - web
  only:
    - master

.deploy_refactor_job:
  <<: *base_stage
  stage: stage
  tags:
    - deploy-stage-2
  except:
    - tags
    - web
  only:
    - refactor

.publish_component_anchor: &publish_component |
  registry="$REGISTRY_URL_CICD"
  if [ "$CI_COMMIT_TAG" == "" ]; then
    version="${CI_COMMIT_SHA:0:8}"
    ./publish.sh $registry/docs:$version
  else
    version="${CI_COMMIT_TAG}"
    ./publish.sh $registry/docs:$version
    echo ""
    echo "Pushing docker to prod registry"
    echo ""
    docker tag "$registry/docs:$version" "$REGISTRY_URL_PROD/docs:$version"
    GITLAB_GCR_PUSH_SERVICE_ACCOUNT="${GITLAB_GCR_PULL_CICD_PUSH_POC}"
    echo "$GITLAB_GCR_PUSH_SERVICE_ACCOUNT" > /root/gcp.json
    gcloud auth activate-service-account --key-file /root/gcp.json
    export GOOGLE_APPLICATION_CREDENTIALS=/root/gcp.json
    gcloud auth configure-docker
    docker push "$REGISTRY_URL_PROD/docs:$version"
  fi

.setup_helm: &setup |
  helm repo remove stable || true
  helm repo add neptune-charts "$CHART_REPO_URL" --username "$CHART_REPO_USER" --password "$CHART_REPO_PASS"
  helm repo update
  kubectl create namespace neptune || true


.release_chart: &release_chart |
  version=$CI_COMMIT_TAG
  registry="${REGISTRY_URL_PROD}"
  mkdir -p cicd-release

  helm package -u --app-version $version helm/charts/neptune-docs -d cicd-release/ --version $version

  helm plugin install https://github.com/chartmuseum/helm-push

  helm push cicd-release/neptune-docs-$version.tgz neptune-charts

.release_prod: &release_prod |
  version=$CI_COMMIT_TAG
  registry="${REGISTRY_URL_PROD}"

  mkdir -p cicd-release
  ./cicd/get_config.py "prod" "$registry" "$version" >deployment-values.yaml
  cp deployment-values.yaml cicd-release/values.yaml

  echo "Checking kubectl connection"
  helm list
  echo ""
  echo "Values:"
  echo ""
  cat cicd-release/values.yaml
  echo ""

  helm upgrade -i \
    neptune-docs \
    neptune-charts/neptune-docs \
    --timeout 600s \
    --version $version \
    --namespace neptune \
    --values=cicd-release/values.yaml

.deploy_script: &deploy |
  echo "Generating values file for stage deployment"
  ./cicd/get_config.py "$component" "${REGISTRY_URL_CICD}" "${CI_COMMIT_SHA:0:8}" >deployment-values.yaml

  cat deployment-values.yaml

  if helm status "$deployment" -n neptune &>/dev/null ; then
    helm upgrade \
      -n neptune \
      --timeout 600s \
      "$deployment" \
      ./helm/charts/neptune-docs \
      --values=deployment-values.yaml
  else
    helm install \
      --timeout 600s \
      --namespace "neptune" \
      "$deployment"  \
      ./helm/charts/neptune-docs \
      --values=deployment-values.yaml
  fi

###############################################################################
# BUILDS
###############################################################################

###############################################################################
# docs
###############################################################################

build:
  extends: .docker_build_job
  script:
    - *publish_component

###############################################################################
# STAGE DEPLOY
###############################################################################

deploy_stage:
  extends: .deploy_stage_job
  environment:
    name: stage-docs
    url: https://docs.stage.neptune.ai
  script:
    - *setup
    - component="stage"
    - deployment="neptune-docs"
    - *deploy

deploy_refactor:
  extends: .deploy_refactor_job
  environment:
    name: stage-docs
    url: https://new-docs.stage.neptune.ai
  script:
    - *setup
    - component="refactor"
    - deployment="neptune-new-docs"
    - *deploy

###############################################################################
# PROD DEPLOY
###############################################################################

deploy_chart:
  extends: .release_chart_job
  script:
    - *setup
    - *release_chart

deploy_prod:
  extends: .deploy_prod_job
  allow_failure: false
  script:
    - *setup
    - *release_prod
  artifacts:
    paths:
      - cicd-release

